{    
    "Set a variable" : { 
        "scope": "adams_cmd",       
        "prefix": "var set var",         
        "body": [      
            "var set var=${1:\\$_self.${2:varname}} ${3|real,int,str,obj|}=$4",
            "$0"
        ],
        "description": "Set a variable"
    },
    "If statement" : { 
        "scope": "adams_cmd",       
        "prefix": "if ",         
        "body": [      
            "if condition=(eval($3))",
            "\t$0",
            "end"
        ],
        "description": "If Statement"
    },
    "For loop" : { 
        "scope": "adams_cmd",       
        "prefix": "for ",         
        "body": [      
            "for var=${1:\\$_self.${2:idx}} ${3|start_value=1 end_value=, obj=|}",
            "\t$0",
            "end"
        ],
        "description": "For loop"
    },
    "Integer For loop" : { 
        "scope": "adams_cmd",       
        "prefix": "for ",         
        "body": [      
            "for var=${1:\\$_self.idx}_ start_value=${2:1} end_value=$3",
            "\tvar set var=$1 int=(eval(nint($1_)))",
            "\t$0",
            "end"
        ],
        "description": "Integer For loop"
    },
    "Macro Header" : {
        "scope": "adams_cmd",
        "prefix": "macro_header ",
        "body": [
            "!USER_ENTERED_COMMAND ${1:command}",
            "! -----------------------------------------------------------------",
            "! MACRO NAME:  $TM_FILENAME",
            "! DESCRIPTION: ${2:description}   ",
            "! AUTHOR:      ${3:Ben Thornton (ben.thornton@hexagon.com)}",
            "!END_OF_PARAMETERS",
            "$0"
        ],
        "description": "Macro Header"        
    },
    "db_exists": {
        "scope": "adams_cmd",
        "prefix": "db_exists(",
        "body":["db_exists(\"$0\")"]
    },
    "Run Python Code": {
        "scope": "adams_cmd",
        "prefix": "var set var=$_self.pystr",
        "body": [
            "var set var=${1|$_self.,.mdi.|}py_str str=\"$0\"",
            "var set var=$1py_str str=(eval($1py_str)), \"\"",
            "var set var=$1tmp_int int=(eval(run_python_code(str_merge_strings(\"\\\\\\n\", $1py_str))))"
        ]
    },
    "Alert Box": {
        "scope": "adams_cmd",
        "prefix": "mdi gui_utl_alert_box_1",
        "body": [
            "mdi gui_utl_alert_box_1 type=${1|error,warning,info|} text=\"$0\""
        ]
    },
    "Create Request": {
        "scope" : "adams_cmd",
        "prefix": "output_control create request",
        "body": [
            "output_control create request &",
            "\trequest_name =  $1 &",
            "\tresults_name = ${1/.*?(\\w+)\\W*$/$1/} &",
            "\tcomponent_names = \"\", \"$0\", \"\", \"\", \"\", \"\", \"\", \"\" &",
            "\tcomponent_units = \"no_units\", \"no_units\", \"no_units\", \"no_units\", \"no_units\", \"no_units\", \"no_units\", \"no_units\"  &",
            "\t$LINE_COMMENT Only use component_labels if you want to override the default unit labels ",
            "\tcomponent_labels = \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" &",
            "\tf2 = \"\" &",
            "\tf3 = \"\" &",
            "\tf4 = \"\" &",
            "\tf6 = \"\" &",
            "\tf7 = \"\" &",
            "\tf8 = \"\""
        ]
    },
    "Wrap Delete Statement": {
        "scope": "adams_cmd",
        "body": [
            "${TM_SELECTED_TEXT/^(\\s*?).*$/$1/}if condition=(eval(db_exists(\"${TM_SELECTED_TEXT/^.*(?<==)\\s*[\"']?([^\\s&'\"]+)[\"']?$/$1/}\")))",
            "\t$TM_SELECTED_TEXT",
            "${TM_SELECTED_TEXT/^(\\s*?).*$/$1/}end"
        ]
    }
}
